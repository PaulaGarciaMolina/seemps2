[build-system]
requires = ["setuptools", "cython>=3.0.0", "numpy", "scipy"]
build-backend = "setuptools.build_meta"

[project]
name = "seemps"
version = "2.3.1"
description = "Matrix Product State library for quantum simulation and numerical analysis"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Juan José García Ripoll", email = "juanjose.garciaripoll@gmail.com"},
    {name = "Paula García Molina"},
    {name = "Juan José Rodríguez aldavero"},
]
maintainers = [
    {name = "Juan José García Ripoll", email = "juanjose.garciaripoll@gmail.com"},
]
keywords = [
    "quantum-computing",
    "matrix-product-states",
    "tensor-networks",
    "dmrg",
    "numerical-analysis",
    "quantum-simulation",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Mathematics",
]
dependencies = [
    "numpy",
    "scipy",
    "h5py",
]
requires-python = ">= 3.11"

[project.urls]
"Homepage" = "https://github.com/juanjosegarciaripoll/seemps2"
"Repository" = "https://github.com/juanjosegarciaripoll/seemps2"
"Documentation" = "https://seemps2.hbar.es/"
"Bug Tracker" = "https://github.com/juanjosegarciaripoll/seemps2/issues"
"Changelog" = "https://github.com/juanjosegarciaripoll/seemps2/releases"

[tool.setuptools.packages.find]
where = ["src"]  # list of folders that contain the packages (["."] by default)
include = ["seemps*"]  # package names should match these glob patterns (["*"] by default)

[tool.ruff]
exclude = [
    ".git",
	".github",
	"__pycache__",
	"build",
	"dist",
	"venv",
	".flake8",
	"scipy-stubs",
]

# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.lint]
# Checks to ignore or add
ignore = ["E741",
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
]
# select = ["D"]  # Enable pydocstyle checks

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[project.optional-dependencies]
# Minimal optional deps for PyPI users
test = [
    "opt_einsum",  # For testing tensor contractions
]

[dependency-groups]
# Local development dependencies (not published to PyPI)
dev = [
    "numpy",
    "mypy>1.16",
    "ruff>=0.9.3",
    "basedpyright>1.29",
    "darglint",      # Docstring-signature consistency
    "opt_einsum",    # To test contractions
    "optype[numpy]", # For typing tensors
    "scipy-stubs",
]

[tool.basedpyright]
# See https://github.com/DetachHead/basedpyright/blob/main/docs/configuration.md
# TODO: Remove this option and report underscore function being imported
reportPrivateUsage = false
# TODO: Remove these once we have well defined values for the NDArray dtypes
reportUnknownVariableType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
# TODO: Remove these once we don't have variables with uppercase letters
# (e.g. in hamiltonians.py 'H' is used as a variable)
reportConstantRedefinition = false
# TODO: Remove this option once we don't use Any anywhere
reportAny = false
reportExplicitAny = false
# TODO: Explicitly ignore function output by assigning it to '_'
reportUnusedCallResult = false
# TODO: Explicitly install stubs for scipy, h5py
reportMissingTypeStubs = false
# TODO: Eliminate unused variables
reportUnusedVariable = false
reportUnusedParameter = false
# TODO: Eliminate uses of Callable without arguments
reportMissingTypeArgument = false
# TODO: use @override whenever a new implementation for a method is
# provided, even abstract methods, as per https://peps.python.org/pep-0698/
reportImplicitOverride = false
# TODO: unfortunately, we need cyclic imports
reportImportCycles = false
# TODO: we use isinstance(...) to assert types in some operations (e.g. addition
# of MPO) because we cannot believe inputs are of the right type
reportUnnecessaryIsInstance = false
reportUnreachable = false
reportUnnecessaryComparison = false
# TODO: Remove all calls in initializers
reportCallInDefaultInitializer = false
# TODO: Rename imported functions with _ prefix
reportPrivateLocalImportUsage = false
reportUnknownArgumentType = false
# TODO: Remove this to detect _check_convergence and other unused functions
reportUnusedFunction=false

[tool.mypy]
warn_incomplete_stub = false
ignore_missing_imports = true

[tool.docformatter]
recursive = true
wrap-summaries = 88
wrap-descriptions = 88
blank = true
